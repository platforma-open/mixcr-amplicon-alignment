ll := import("@platforma-sdk/workflow-tengo:ll")
self := import("@platforma-sdk/workflow-tengo:tpl.light")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
smart := import("@platforma-sdk/workflow-tengo:smart")
slices := import("@platforma-sdk/workflow-tengo:slices")
assets := import("@platforma-sdk/workflow-tengo:assets")
exec := import("@platforma-sdk/workflow-tengo:exec")
pt := import("@platforma-sdk/workflow-tengo:pt")

json := import("json")

mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:main")
ptablerSw := assets.importSoftware("@platforma-open/milaboratories.software-ptabler:main")

self.defineOutputs("tsv")

self.body(func(inputs) {
	clnsFile := inputs[pConstants.VALUE_FIELD_NAME]

	params := inputs.params
	exportArgs := params.exportArgs

	clonotypeKeyColumns := params.clonotypeKeyColumns

	hashKeyDerivationExpressionPt := func(sourceColumns) {
		return pt.concatStr(
			slices.map(sourceColumns, func(colName) { return pt.col(colName) }),
			{delimiter: "#"}
		).hash("sha256", "base64_alphanumeric", 120)
	}

	createExport := func(additionalAction) {
		mixcrCmdBuilder := exec.builder().
			inMediumQueue().
			mem("12GB").
		    cpu(2).
			printErrStreamToStdout().
			dontSaveStdoutOrStderr().
			software(mixcrSw).
			secret("MI_LICENSE", "MI_LICENSE").
			arg("exportClones").
			arg("--dont-split-files").
			arg("--drop-default-fields").
			arg("--reset-export-clone-table-splitting").
			arg("--chains").arg(params.mixcrChains).
			arg("--export-productive-clones-only")

		additionalAction(mixcrCmdBuilder)

		return mixcrCmdBuilder.
			arg("clones.clns").
			addFile("clones.clns", clnsFile).
			arg("clones.tsv").
			saveFile("clones.tsv").
			addFile("library.json", params.referenceLibrary).
			cacheHours(3).
			run()
	}

	mixcrCmd := createExport(func(mixcrCmdBuilder) {
		for argGrp in exportArgs {
			for arg in argGrp {
				mixcrCmdBuilder.arg(arg)
			}
		}
	})

	unprocessedTsv := mixcrCmd.getFile("clones.tsv")

	if is_undefined(clonotypeKeyColumns) {
		ll.panic("clonotypeKeyColumns is undefined")
	}

	// Simplified PTabler processing for main TSV output
	wfMain := pt.workflow().
		inMediumQueue().
		mem("8GB").
		cpu(2)
		
	frameInputMap := {
		file: unprocessedTsv,
		xsvType: "tsv",
		schema: [ { column: "readCount", type: "Double" } ]
	}
	dfMain := wfMain.frame(frameInputMap, { inferSchema: false, id: "input_table" })

	dfMain.addColumns(
		pt.col("readCount").round().cast("Long").alias("readCount")
	)
	dfMain.addColumns(
		hashKeyDerivationExpressionPt(clonotypeKeyColumns).alias("clonotypeKey")
	)

	dfMain.save("output.tsv")
	ptablerResultMain := wfMain.run()
	processedTsv := ptablerResultMain.getFile("output.tsv")

	return {
		tsv: processedTsv
	}
}) 