// process

self := import("@platforma-sdk/workflow-tengo:tpl")

ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
slices := import("@platforma-sdk/workflow-tengo:slices")
maps := import("@platforma-sdk/workflow-tengo:maps")

json := import("json")
text := import("text")

mixcrAnalyzeTpl := assets.importTemplate(":mixcr-analyze")
mixcrExportTpl := assets.importTemplate(":mixcr-export")
aggregateByClonotypeKeyTpl := assets.importTemplate(":aggregate-by-clonotype-key")
calculateExportSpecs := import(":calculate-export-specs")

self.awaitState("InputsLocked")
self.awaitState("params", "ResourceReady")
self.awaitState("inputSpec", "ResourceReady")
self.awaitState("referenceLibrary", "ResourceReady")

self.body(func(inputs) {

	inputSpec := inputs.inputSpec
	params := inputs.params
	blockId := params.blockId
	referenceLibrary := inputs.referenceLibrary
	chains := params.chains
	mixcrChains := params.mixcrChains
	cloneClusteringMode := params.cloneClusteringMode
	tagPattern := params.tagPattern

	hasUMI := text.contains(tagPattern, "UMI") || text.contains(tagPattern, "Umi") || text.contains(tagPattern, "umi")
	limitInput := inputs.limitInput
	perProcessMemGB := params.perProcessMemGB
	perProcessCPUs := params.perProcessCPUs
	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	// Use calculateExportSpecs for output columns
	presetSpecForBack := {
		assemblingFeature: ["VDJRegion"],
		splitByC: true,
		umiTags: hasUMI ? ["Molecule"] : undefined,
		cellTags: undefined
	}

	exportSpecs := calculateExportSpecs(presetSpecForBack, blockId)

	columnsSpecPerSample := exportSpecs.columnsSpecPerSample
	columnsSpecPerClonotypeNoAggregates := exportSpecs.columnsSpecPerClonotypeNoAggregates
	columnsSpecPerClonotypeAggregates := exportSpecs.columnsSpecPerClonotypeAggregates
	clonotypeKeyColumns := exportSpecs.clonotypeKeyColumns
	clonotypeKeyArgs := exportSpecs.clonotypeKeyArgs
	exportArgs := exportSpecs.exportArgs
	mainAbundanceColumnNormalized := exportSpecs.mainAbundanceColumnNormalized
	mainAbundanceColumnUnnormalized := exportSpecs.mainAbundanceColumnUnnormalized
	mainIsProductiveColumn := exportSpecs.mainIsProductiveColumn
	axesByClonotypeKey := exportSpecs.axesByClonotypeKey

	columnsToSchema := func(columns) {
		schema := []
		columnsAdded := {}
		for col in columns {
			if !columnsAdded[col.column] {
				schema += [ { column: col.column, type: col.spec.valueType } ]
				columnsAdded[col.column] = true
			}
		}
		return schema
	}


    clnsAnnotations := {
		"mixcr.com/assemblingFeature": "VDJRegion",
		"pl7.app/label": "MiXCR Amplicon Alignment Clonesets"
	}

	// Create target outputs
	targetOutputs := [ {
		type: "Resource",
		spec: {
			kind: "PColumn",
			valueType: "File",
			name: "mixcr.com/qc",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			}
		},
		name: "qc"
	}, {
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "pl7.app/log",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			},
			valueType: "Log"
		},
		name: "log"
	}, {
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "mixcr.com/clns",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			},
			annotations: clnsAnnotations,
			valueType: "File"
		},
		name: "clns"
	}, {
		type: "ResourceMap",
		name: "reports",
		spec: {
			kind: "PColumn",
			name: "mixcr.com/report",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			},
			valueType: "File",
			axesSpec: [ {
				type: "String",
				name: "mixcr.com/report/source",
				annotations: {
					"pl7.app/label": "Source MiXCR stage"
				}
			}, {
				type: "String",
				name: "mixcr.com/report/format",
				annotations: {
					"pl7.app/label": "Report format"
				},
				domain: {
					"pl7.app/dense": string(json.encode(["json", "txt"]))
				}
			} ]
		}
	}]

	// Run MiXCR analysis
	mixcrResults := pframes.processColumn(
		{ spec: inputSpec, data: inputs.inputData },
		mixcrAnalyzeTpl,
		targetOutputs,
		{
			aggregate: [{
				name: "pl7.app/sequencing/lane",
				optional: true
			}, {
				name: "pl7.app/sequencing/readIndex",
				optional: true
			}],

			passAggregationAxesNames: true,

			traceSteps: [{type: "milaboratories.mixcr-amplicon-alignment", id: blockId, importance: 20, label: "MiXCR generic amplicon"}],

			extra: {
				params: {
					fileExtension: fileExtension,
					referenceLibrary: referenceLibrary,
					cloneClusteringMode: cloneClusteringMode,
					hasUMI: hasUMI,
					tagPattern: tagPattern
				},
				limitInput: limitInput
			},

			// by passing those parameters as meta fields we allow for recovery and deduplication mechanisms
			// to pick up the results from executions with different values for CPU and Memory overrides
            metaExtra: {
                perProcessMemGB: perProcessMemGB,
                perProcessCPUs: perProcessCPUs
            }
		}
	)

	axesByClonotypeKeyWithChain := [ maps.deepTransform(axesByClonotypeKey[0], {
			spec: { domain: { "pl7.app/vdj/chain": chains } }
		}) ]

	exportOutputs := [ {
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "mixcr.com/clonotypeTable",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			},
			valueType: "File"
		},
		name: "clonotypeTable",
		path: ["tsv"]
	}, {
		type: "Xsv",
		xsvType: "tsv",
		settings: {
			axes: axesByClonotypeKeyWithChain,
			columns: columnsSpecPerSample,
			storageFormat: "Parquet",
			partitionKeyLength: 0
		},
		mem: "16GB",
		cpu: 2,
		name: "byCloneKeyBySample",
		path: ["tsv"]
	}]

	exportResults := pframes.processColumn(
		mixcrResults.output("clns"),
		mixcrExportTpl,
		exportOutputs,
		{
			extra: {
				params: {
					clonotypeKeyColumns: clonotypeKeyColumns,
					exportArgs: exportArgs,
					referenceLibrary: referenceLibrary,
					mixcrChains: mixcrChains
				}
			}
		}
	)

	// Aggregate by clonotype key
	aggregationOutputs := [ {
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "mixcr.com/clonotypeProperties",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			},
			valueType: "File"
		},
		name: "clonotypeProperties",
		path: ["tsv"]
	}, {
		type: "Xsv",
		xsvType: "tsv",
		settings: {
			axes: axesByClonotypeKeyWithChain,
			columns: columnsSpecPerClonotypeNoAggregates + columnsSpecPerClonotypeAggregates,
			storageFormat: "Parquet"
		},
		mem: "12GB",
		cpu: 2,
		name: "aggregates",
		path: ["tsv"]
	} ]

	aggregationResults := pframes.processColumn(
		exportResults.output("clonotypeTable"),
		aggregateByClonotypeKeyTpl,
		aggregationOutputs,
		{
			aggregate: ["pl7.app/sampleId"],
			traceSteps: [{type: "milaboratories.mixcr-amplicon-alignment.aggregate", id: blockId + "." + chains, importance: 150, label: "Aggregate " + chains}],

			extra: {
				params: {
					mainAbundanceColumnNormalized: mainAbundanceColumnNormalized,
					mainAbundanceColumnUnnormalized: mainAbundanceColumnUnnormalized,
					schemaPerClonotypeNoAggregates: columnsToSchema(columnsSpecPerClonotypeNoAggregates),
					schemaPerClonotypeAggregates: columnsToSchema(columnsSpecPerClonotypeAggregates),
					schemaPerSample: columnsToSchema(columnsSpecPerSample)
				}
			}
		}
	)

	//Build final output
	clones := pframes.pFrameBuilder()
	exportResults.addXsvOutputToBuilder(clones, "byCloneKeyBySample", "clonotypeProperties/bySample/" + chains + "/")
	aggregationResults.addXsvOutputToBuilder(clones, "aggregates", "clonotypeProperties/aggregates/" + chains + "/")

	return {
		"qc.spec": mixcrResults.outputSpec("qc"),
		"qc.data": mixcrResults.outputData("qc"),

		"logs.spec": mixcrResults.outputSpec("log"),
		"logs.data": mixcrResults.outputData("log"),

		"reports.spec": mixcrResults.outputSpec("reports"),
		"reports.data": mixcrResults.outputData("reports"),

		"clns.spec": mixcrResults.outputSpec("clns"),
		"clns.data": mixcrResults.outputData("clns"),

		"progress.data": mixcrResults.outputData("log"),

		clones: clones.build()
	}
}) 